{
  "name": "express-load",
  "description": "Autoload modules into an Express application instance, config, models, routes, controllers etc...",
  "version": "1.1.14",
  "author": {
    "name": "Jarrad Seers",
    "email": "jarrad@jarradseers.com"
  },
  "contributors": [
    {
      "name": "Jarrad Seers",
      "email": "jarrad@jarradseers.com"
    },
    {
      "name": "Alex Koller",
      "email": "alex@webmolecule.co.za"
    },
    {
      "name": "Fabien Franzen",
      "email": "info@atelierfabien.be"
    },
    {
      "name": "Jean-Matthieu Barbier",
      "email": "jm.barbier+github@solidev.net"
    },
    {
      "name": "perfectworks",
      "email": "perfectworks@gmail.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    },
    {
      "name": "vkadam",
      "email": "vishal.4kadam@gmail.com"
    }
  ],
  "main": "index",
  "keywords": [
    "express",
    "express-load",
    "mvc",
    "autoload",
    "auto-configure",
    "configuration"
  ],
  "dependencies": {
    "async": "0.2.9"
  },
  "devDependencies": {
    "express": "3.x"
  },
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jarradseers/express-load"
  },
  "readme": "# Express Load\n\nThe _express-load_ module provides the ability to load scripts into an Express instance from specified directories or files. \nMake large express MVC applications easier to develop by allowing a logical file separation without having to require your scripts. \nSee the examples folder for information.\n\nExpress Load can be used to autoload models, routes, schemas, configs, controllers, object maps... etc...\n\nYou get access to the autoloaded files in the Express application instance to keep out of the global namespace. \nThis also allows access to the scripts via the request object. `req.app`\n\nA script at `controllers/user.js` becomes available as `app.controllers.user` or `req.app.controllers.user` in a request.\n\n## Installation\n\n\t$ npm install express-load\n\n## Usage\n\n```js\nvar load = require('express-load');\n\nload('config')\n  .then('routes')\n  .into(app);\n```\n\n## Simple Express Load Example\n\n### controllers/site.js\n\n```js\nexports.index = function(req, res, next) {\n  res.send('Hello world!');\n};\n```\n\n### routes/site.js\n\n```js\nmodule.exports = function(app) {\n\n  var site = app.controllers.site;\n  \n  app.get('/',\n    site.index\n  );\n\n};\n```\n\n### app.js\n\n```js\nvar express = require('express')\n  , load = require('express-load');\n\nvar app = express();\n\nload('controllers')\n  .then('routes')\n  .into(app);\n\napp.listen(3000)\n```\n\n## Load Order\n\nThe basic load order is the order that is specified in code, for example, you will want to load models before controllers and controllers before routes:\n\n```js\nload('models')\n  .then('controllers')\n  .then('routes')\n  .into(app);\n```\n\nThis would simply load all models, all controllers, all routes in that order (alphabetical order within the directories).\n\n### Specifying Complex Order\n\nIf you have two files in the foo folder _a.js_ and _z.js_ and you need _z.js_ loaded BEFORE _a.js_ you would simply do the following:\n\n```js\nload('foo/z.js').then('foo').into(app);\n```\n\n_express-load_ will recognise the order and will not add it again later down the chain.\n\n### Async load\n\nIf you have an async script to load, _express-load_ will pass a `callback` function to your script and wait this function be called to load remain scripts.\n\n```js\nload('syncFoo.js').then('asyncBar.js').then('syncBar.js');\n\n// asyncBar.js\nmodule.exports = function (app, callback) {\n    setTimeout(function () {\n        console.log('After 5 seconds');\n        callback();\n    }, 5000);\n};\n```\n\nIf you need to know when async load is complete, you may pass the callback function as a second argument to ```into```. The callback get called when async load is completed.\n\n```js\nload('models')\n    .then('collections')\n    .then('controllers')\n    .into(app, function(err, instance) {\n        if(err) throw err;\n        app.listen(app.get('port'));\n    });\n```\n\n## Logging\n\nLogging is off by default but can be enabled in the following way:\n\n```js\nload('controllers', {verbose:true}).into(app);\n```\n\nSee the verbose example in the examples folder.\n\n## Files and folders\n\n_express-load_ will ignore hidden files and folders (by leading period) unless you explicitly define them to be loaded.\n\n_express-load_ will by default only load files ending with `.js`, `.node`, `.coffee`, `.sjs`, `.json` extensions, unless you set checkext option to false : no file extension check at all. You can also change the list of allowed extension (in extlist option).\n\n```js\nload('controllers', {checkext:true, extlist:['.js','.myextension']}).into(app);\n```\n\n### Nested Folders\n\nIf you had nested folders like the following example: \n\n\tmodels\n\t\thumans\n\t\t\tcool.js\n\t\t\tnot.js\n\t\tanimals\n\t\t\tdog.js\n\t\t\tcat.js\n\nYou would end up with the scripts being available in the following structure:\n\n```js\napp.models.humans.cool\napp.models.humans.not\napp.models.animals.dog\napp.models.animals.cat\n```\n\n### Base directory\n\nExpress-load load scripts based on relative directory, however you can use `cwd` option if you want to load based on the other directory. see [example](https://github.com/jarradseers/express-load/tree/master/examples/cwd). \n\n### Getting the Express Application instance\n\nThis can be done in one of two ways:\n\n#### In a script that is auto-loaded...\n\n```js\nmodule.exports = function(app) {\n  console.log(app);\n};\n```\n\nA script will only be loaded with parameters if module.exports is a function. Multiple parameters can be passed to the script in the `into` method, for example:\n\n```js\nload('controllers').into(app, parameter, another);\n```\n\n#### From a request object...\n\n```js\napp.get('/', function(req, res, next) {\n  console.log(req.app);\n});\n```\n\n### File and Folder names vs Object namespace examples\n\nThe names of files and folders are used to create the namespace therefore rules have been put in place. dashes `-` and periods `.` are removed and the following character is uppercased. For example:\n\n\tsome-controllers/my.controller.js -> *.someControllers.myController\n\nPlease see the examples folder for working examples of _express-load_ in action.\n\n# License \n\n(The MIT License)\n\nCopyright (c) 2012 Jarrad Seers &lt;jarrad@jarradseers.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jarradseers/express-load/issues"
  },
  "homepage": "https://github.com/jarradseers/express-load",
  "_id": "express-load@1.1.14",
  "_shasum": "385c2148a91427ecc25b9c9df8cc99f155322654",
  "_from": "express-load@",
  "_resolved": "https://registry.npmjs.org/express-load/-/express-load-1.1.14.tgz"
}
